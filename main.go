package main

import (
	"encoding/json"
	"fmt"
	mdb "github.com/explabs/ad-ctf-paas-api/database"
	"github.com/explabs/ad-ctf-paas-exploits/service/runner"
	"github.com/explabs/ad-ctf-paas-exploits/service/storage"
	amqp "github.com/rabbitmq/amqp091-go"
	log "github.com/sirupsen/logrus"
	"os"
)

func failOnError(err error, msg string) {
	if err != nil {
		log.Panicf("%s: %s", msg, err)
	}
}

func main() {
	log.SetFormatter(&log.JSONFormatter{})
	mdb.InitMongo()

	var host, port = "rabbitmq", 5672
	if os.Getenv("MODE") == "dev" {
		host = "localhost"
	}
	rabbitAddr := fmt.Sprintf("amqp://service:%s@%s:%d", os.Getenv("ADMIN_PASS"), host, port)

	conn, err := amqp.Dial(rabbitAddr)
	failOnError(err, "Failed to connect to RabbitMQ")
	defer conn.Close()
	//var e storage.Exploits
	//e.Script = "script.py"
	//e.Rounds = []int{1, 3, 5}
	//e.UploadExploits()
	ch, err := conn.Channel()
	failOnError(err, "Failed to open a channel")
	defer ch.Close()

	q, err := ch.QueueDeclare(
		"exploits", // name
		false,      // durable
		false,      // delete when unused
		false,      // exclusive
		false,      // no-wait
		nil,        // arguments
	)
	failOnError(err, "Failed to declare a queue")

	err = ch.Qos(
		1,     // prefetch count
		0,     // prefetch size
		false, // global
	)
	failOnError(err, "Failed to set QoS")

	msgs, err := ch.Consume(
		q.Name, // queue
		"",     // consumer
		false,  // auto-ack
		false,  // exclusive
		false,  // no-local
		false,  // no-wait
		nil,    // args
	)
	failOnError(err, "Failed to register a consumer")

	forever := make(chan bool)
	go func() {
		for d := range msgs {
			var m runner.Message
			log.WithFields(log.Fields{"body": string(d.Body)}).Info("Received a message")
			err := json.Unmarshal(d.Body, &m)
			if err != nil {
				log.Error(err)
			}
			var e storage.Exploits
			e.Load()
			err = e.UploadExploit()
			if err != nil {
				log.Error(err)
			}
			response := "complete"
			err = runner.RunExploits(&m)
			if err != nil {
				response = "failed"
				log.Error(err)
			}
			err = ch.Publish(
				"",        // exchange
				d.ReplyTo, // routing key
				false,     // mandatory
				false,     // immediate
				amqp.Publishing{
					ContentType:   "text/plain",
					CorrelationId: d.CorrelationId,
					Body:          []byte(response),
				})
			d.Ack(false)
		}
	}()
	go log.Info("Exploits service started")
	<-forever
}
